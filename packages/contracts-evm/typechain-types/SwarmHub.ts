/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "./common";

export interface SwarmHubInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ActionApproved"
      | "ActionExecuted"
      | "AgentRegistered"
      | "ProposalCreated"
      | "ProposalVoted"
      | "TaskCreated"
  ): EventFragment;
}

export namespace ActionApprovedEvent {
  export type InputTuple = [taskId: BigNumberish, actionId: BigNumberish];
  export type OutputTuple = [taskId: bigint, actionId: bigint];
  export interface OutputObject {
    taskId: bigint;
    actionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ActionExecutedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    txHash: BytesLike,
    result: string
  ];
  export type OutputTuple = [taskId: bigint, txHash: string, result: string];
  export interface OutputObject {
    taskId: bigint;
    txHash: string;
    result: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AgentRegisteredEvent {
  export type InputTuple = [
    agent: AddressLike,
    role: string,
    bond: BigNumberish
  ];
  export type OutputTuple = [agent: string, role: string, bond: bigint];
  export interface OutputObject {
    agent: string;
    role: string;
    bond: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    agent: AddressLike,
    uri: string,
    contentHash: BytesLike
  ];
  export type OutputTuple = [
    taskId: bigint,
    agent: string,
    uri: string,
    contentHash: string
  ];
  export interface OutputObject {
    taskId: bigint;
    agent: string;
    uri: string;
    contentHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalVotedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    agent: AddressLike,
    support: boolean,
    weight: BigNumberish
  ];
  export type OutputTuple = [
    taskId: bigint,
    agent: string,
    support: boolean,
    weight: bigint
  ];
  export interface OutputObject {
    taskId: bigint;
    agent: string;
    support: boolean;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TaskCreatedEvent {
  export type InputTuple = [
    taskId: BigNumberish,
    creator: AddressLike,
    metadataURI: string
  ];
  export type OutputTuple = [
    taskId: bigint,
    creator: string,
    metadataURI: string
  ];
  export interface OutputObject {
    taskId: bigint;
    creator: string;
    metadataURI: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SwarmHub extends BaseContract {
  connect(runner?: ContractRunner | null): SwarmHub;
  waitForDeployment(): Promise<this>;

  interface: SwarmHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ActionApproved"
  ): TypedContractEvent<
    ActionApprovedEvent.InputTuple,
    ActionApprovedEvent.OutputTuple,
    ActionApprovedEvent.OutputObject
  >;
  getEvent(
    key: "ActionExecuted"
  ): TypedContractEvent<
    ActionExecutedEvent.InputTuple,
    ActionExecutedEvent.OutputTuple,
    ActionExecutedEvent.OutputObject
  >;
  getEvent(
    key: "AgentRegistered"
  ): TypedContractEvent<
    AgentRegisteredEvent.InputTuple,
    AgentRegisteredEvent.OutputTuple,
    AgentRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalVoted"
  ): TypedContractEvent<
    ProposalVotedEvent.InputTuple,
    ProposalVotedEvent.OutputTuple,
    ProposalVotedEvent.OutputObject
  >;
  getEvent(
    key: "TaskCreated"
  ): TypedContractEvent<
    TaskCreatedEvent.InputTuple,
    TaskCreatedEvent.OutputTuple,
    TaskCreatedEvent.OutputObject
  >;

  filters: {
    "ActionApproved(uint256,uint256)": TypedContractEvent<
      ActionApprovedEvent.InputTuple,
      ActionApprovedEvent.OutputTuple,
      ActionApprovedEvent.OutputObject
    >;
    ActionApproved: TypedContractEvent<
      ActionApprovedEvent.InputTuple,
      ActionApprovedEvent.OutputTuple,
      ActionApprovedEvent.OutputObject
    >;

    "ActionExecuted(uint256,bytes32,string)": TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;
    ActionExecuted: TypedContractEvent<
      ActionExecutedEvent.InputTuple,
      ActionExecutedEvent.OutputTuple,
      ActionExecutedEvent.OutputObject
    >;

    "AgentRegistered(address,string,uint256)": TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;
    AgentRegistered: TypedContractEvent<
      AgentRegisteredEvent.InputTuple,
      AgentRegisteredEvent.OutputTuple,
      AgentRegisteredEvent.OutputObject
    >;

    "ProposalCreated(uint256,address,string,bytes32)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalVoted(uint256,address,bool,uint256)": TypedContractEvent<
      ProposalVotedEvent.InputTuple,
      ProposalVotedEvent.OutputTuple,
      ProposalVotedEvent.OutputObject
    >;
    ProposalVoted: TypedContractEvent<
      ProposalVotedEvent.InputTuple,
      ProposalVotedEvent.OutputTuple,
      ProposalVotedEvent.OutputObject
    >;

    "TaskCreated(uint256,address,string)": TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
    TaskCreated: TypedContractEvent<
      TaskCreatedEvent.InputTuple,
      TaskCreatedEvent.OutputTuple,
      TaskCreatedEvent.OutputObject
    >;
  };
}
